package com.cts.liveproject.librarymanagementsystem.filter;

import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.cts.liveproject.librarymanagementsystem.services.jwt.UserDetailsServiceImpl;
import com.cts.liveproject.librarymanagementsystem.utils.JwtUtils;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {

	@Autowired
	private UserDetailsServiceImpl userDetailsServiceImpl;
	
	@Autowired
	private JwtUtils jwtUtils;
	
	@Autowired
	private ApplicationContext context;
	
	private final Logger log = LoggerFactory.getLogger(JwtRequestFilter.class);
	

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
		 String authHeader = request.getHeader("Authorization");
	        String token = null;
	        String username = null;

	        if (authHeader != null && authHeader.startsWith("Bearer ")) {
	            token = authHeader.substring(7);
	            log.info(token);
	            username = jwtUtils.extractUserName(token);
	            log.info(username);
	            log.info("Token Authentication is done");
	        }

	        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
////	        	UserDetails userDetails = context
//	            log.info("User Details found");
//	            if (jwtUtils.validateToken(token, userDetails)) {
////	            	List<String> roles = jwtUtils.extractAllClaims(token).get("roles", List.class);
////	                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, roles.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList()));
//	                
//	                log.info("Username Password Verified");
//	                authToken.setDetails(new WebAuthenticationDetailsSource()
//	                        .buildDetails(request));
//	                SecurityContextHolder.getContext().setAuthentication(authToken);
//	                log.info("Token Authenticated");
	        	
	        	UserDetails userDetails = context.getBean(UserDetailsServiceImpl.class).loadUserByUsername(username);
	        	if(jwtUtils.validateToken(token, userDetails))
	        	{
	        		log.info("Validating token with username and username password authentication is on going");
	        		UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
	        		log.info(authToken);
	        		authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	        		SecurityContextHolder.getContext().setAuthentication(authToken);
	 
	        		
	            }
	        }

	        filterChain.doFilter(request, response);
	    }
		
		
	}
	
