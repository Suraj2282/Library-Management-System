package com.cts.liveproject.librarymanagementsystem.controllers;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cts.liveproject.librarymanagementsystem.dto.AuthenticationRequest;
import com.cts.liveproject.librarymanagementsystem.dto.AuthenticationResponse;
import com.cts.liveproject.librarymanagementsystem.entities.User;
import com.cts.liveproject.librarymanagementsystem.services.jwt.UserDetailsServiceImpl;
import com.cts.liveproject.librarymanagementsystem.utils.JwtUtils;

import jakarta.servlet.http.HttpServletResponse;

@RestController
public class AuthenticationController {
	
	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Autowired
	private UserDetailsService userDetailsService;
	
	@Autowired
	private JwtUtils jwtUtils;
	
	@PostMapping("/")
	public AuthenticationResponse createAuthentiationToken(@RequestBody AuthenticationRequest authenticationRequest, HttpServletResponse response) throws IOException
	{
		try
		{
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authenticationRequest.getUserEmail(), authenticationRequest.getUserPassword()));
			
		}catch(BadCredentialsException ex)
		{
			throw new BadCredentialsException("Incorrect Email or Password");
		}
		catch (DisabledException e) {
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "User not created");
			return ;		}
		final UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getUserEmail());
		final String jwt = jwtUtils.generateToken(userDetails.getUsername());
		return new AuthenticationResponse(jwt);
	}

}
